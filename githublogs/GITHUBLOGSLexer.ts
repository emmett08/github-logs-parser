// Generated from GITHUBLOGSLexer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class GITHUBLOGSLexer extends Lexer {
	public static readonly EMAIL_LOCAL_PART = 1;
	public static readonly FULLNAME = 2;
	public static readonly DOMAIN = 3;
	public static readonly HANDLE = 4;
	public static readonly NUMBER = 5;
	public static readonly COMMA = 6;
	public static readonly AND = 7;
	public static readonly AT = 8;
	public static readonly PLUS = 9;
	public static readonly LESS = 10;
	public static readonly GREATER = 11;
	public static readonly DOT = 12;
	public static readonly NOREPLY_DOMAIN = 13;
	public static readonly NEWLINE = 14;
	public static readonly WS = 15;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"EMAIL_LOCAL_PART", "FULLNAME", "DOMAIN", "HANDLE", "NUMBER", "COMMA", 
		"AND", "AT", "PLUS", "LESS", "GREATER", "DOT", "NOREPLY_DOMAIN", "NEWLINE", 
		"WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, "','", 
		"'and'", "'@'", "'+'", "'<'", "'>'", "'.'", "'users.noreply.github.com'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "EMAIL_LOCAL_PART", "FULLNAME", "DOMAIN", "HANDLE", "NUMBER", 
		"COMMA", "AND", "AT", "PLUS", "LESS", "GREATER", "DOT", "NOREPLY_DOMAIN", 
		"NEWLINE", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(GITHUBLOGSLexer._LITERAL_NAMES, GITHUBLOGSLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return GITHUBLOGSLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(GITHUBLOGSLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "GITHUBLOGSLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return GITHUBLOGSLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return GITHUBLOGSLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return GITHUBLOGSLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return GITHUBLOGSLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x11z\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x03\x02\x06\x02#\n\x02\r\x02" +
		"\x0E\x02$\x03\x02\x03\x02\x06\x02)\n\x02\r\x02\x0E\x02*\x07\x02-\n\x02" +
		"\f\x02\x0E\x020\v\x02\x03\x03\x06\x033\n\x03\r\x03\x0E\x034\x03\x04\x06" +
		"\x048\n\x04\r\x04\x0E\x049\x03\x05\x06\x05=\n\x05\r\x05\x0E\x05>\x03\x06" +
		"\x06\x06B\n\x06\r\x06\x0E\x06C\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b" +
		"\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x05\x0Fp\n\x0F\x03" +
		"\x0F\x03\x0F\x03\x10\x06\x10u\n\x10\r\x10\x0E\x10v\x03\x10\x03\x10\x02" +
		"\x02\x02\x11\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r" +
		"\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B" +
		"\x02\x0F\x1D\x02\x10\x1F\x02\x11\x03\x02\b\x07\x02/02;C\\aac|\x05\x03" +
		"\x02\"C\\c|\x05\x0200C\\c|\x05\x02//2;c|\x03\x022;\x05\x02\v\f\x0F\x0F" +
		"\"\"\x02\x82\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03" +
		"\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02" +
		"\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02" +
		"\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02" +
		"\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02" +
		"\x02\x02\x03\"\x03\x02\x02\x02\x052\x03\x02\x02\x02\x077\x03\x02\x02\x02" +
		"\t<\x03\x02\x02\x02\vA\x03\x02\x02\x02\rE\x03\x02\x02\x02\x0FG\x03\x02" +
		"\x02\x02\x11K\x03\x02\x02\x02\x13M\x03\x02\x02\x02\x15O\x03\x02\x02\x02" +
		"\x17Q\x03\x02\x02\x02\x19S\x03\x02\x02\x02\x1BU\x03\x02\x02\x02\x1Do\x03" +
		"\x02\x02\x02\x1Ft\x03\x02\x02\x02!#\t\x02\x02\x02\"!\x03\x02\x02\x02#" +
		"$\x03\x02\x02\x02$\"\x03\x02\x02\x02$%\x03\x02\x02\x02%.\x03\x02\x02\x02" +
		"&(\x07-\x02\x02\')\t\x02\x02\x02(\'\x03\x02\x02\x02)*\x03\x02\x02\x02" +
		"*(\x03\x02\x02\x02*+\x03\x02\x02\x02+-\x03\x02\x02\x02,&\x03\x02\x02\x02" +
		"-0\x03\x02\x02\x02.,\x03\x02\x02\x02./\x03\x02\x02\x02/\x04\x03\x02\x02" +
		"\x020.\x03\x02\x02\x0213\t\x03\x02\x0221\x03\x02\x02\x0234\x03\x02\x02" +
		"\x0242\x03\x02\x02\x0245\x03\x02\x02\x025\x06\x03\x02\x02\x0268\t\x04" +
		"\x02\x0276\x03\x02\x02\x0289\x03\x02\x02\x0297\x03\x02\x02\x029:\x03\x02" +
		"\x02\x02:\b\x03\x02\x02\x02;=\t\x05\x02\x02<;\x03\x02\x02\x02=>\x03\x02" +
		"\x02\x02><\x03\x02\x02\x02>?\x03\x02\x02\x02?\n\x03\x02\x02\x02@B\t\x06" +
		"\x02\x02A@\x03\x02\x02\x02BC\x03\x02\x02\x02CA\x03\x02\x02\x02CD\x03\x02" +
		"\x02\x02D\f\x03\x02\x02\x02EF\x07.\x02\x02F\x0E\x03\x02\x02\x02GH\x07" +
		"c\x02\x02HI\x07p\x02\x02IJ\x07f\x02\x02J\x10\x03\x02\x02\x02KL\x07B\x02" +
		"\x02L\x12\x03\x02\x02\x02MN\x07-\x02\x02N\x14\x03\x02\x02\x02OP\x07>\x02" +
		"\x02P\x16\x03\x02\x02\x02QR\x07@\x02\x02R\x18\x03\x02\x02\x02ST\x070\x02" +
		"\x02T\x1A\x03\x02\x02\x02UV\x07w\x02\x02VW\x07u\x02\x02WX\x07g\x02\x02" +
		"XY\x07t\x02\x02YZ\x07u\x02\x02Z[\x070\x02\x02[\\\x07p\x02\x02\\]\x07q" +
		"\x02\x02]^\x07t\x02\x02^_\x07g\x02\x02_`\x07r\x02\x02`a\x07n\x02\x02a" +
		"b\x07{\x02\x02bc\x070\x02\x02cd\x07i\x02\x02de\x07k\x02\x02ef\x07v\x02" +
		"\x02fg\x07j\x02\x02gh\x07w\x02\x02hi\x07d\x02\x02ij\x070\x02\x02jk\x07" +
		"e\x02\x02kl\x07q\x02\x02lm\x07o\x02\x02m\x1C\x03\x02\x02\x02np\x07\x0F" +
		"\x02\x02on\x03\x02\x02\x02op\x03\x02\x02\x02pq\x03\x02\x02\x02qr\x07\f" +
		"\x02\x02r\x1E\x03\x02\x02\x02su\t\x07\x02\x02ts\x03\x02\x02\x02uv\x03" +
		"\x02\x02\x02vt\x03\x02\x02\x02vw\x03\x02\x02\x02wx\x03\x02\x02\x02xy\b" +
		"\x10\x02\x02y \x03\x02\x02\x02\f\x02$*.49>Cov\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!GITHUBLOGSLexer.__ATN) {
			GITHUBLOGSLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(GITHUBLOGSLexer._serializedATN));
		}

		return GITHUBLOGSLexer.__ATN;
	}

}

